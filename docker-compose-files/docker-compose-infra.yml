version: '3.7'

services:

  # Keycloak
  postgres-keycloak:
    container_name: postgres-keycloak
    image: docker.io/library/postgres:14
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    networks:
      - keycloak_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak -d keycloak" ]
      interval: 5s
      retries: 100

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.6
    user: "${UID}"
    volumes:
      - "./configs/car-rental-realm.json:/opt/keycloak/data/import/car-rental-realm.json:Z"
    command:
      - start-dev
      - --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HEALTH_ENABLED: "true"
    ports:
      - 7777:8080
    restart: always
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    networks:
      - keycloak_network
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;" ]
      interval: 5s
      timeout: 10s
      retries: 100

  # Postgres for Reservation service
  postgres-reservation:
    image: docker.io/library/postgres:14
    container_name: postgres-reservation
    environment:
      POSTGRES_DB: reservation
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d reservation" ]
      interval: 5s
      retries: 100

  # RabbitMQ
  rabbitmq:
    image: docker.io/library/rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 100

  # MongoDB for Rental service
  mongodb-rental:
    image: docker.io/library/mongo:7.0
    container_name: mongodb-rental
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 10s
      retries: 100

  # MongoDB for Billing service
  mongodb-billing:
    image: docker.io/library/mongo:7.0
    container_name: mongodb-billing
    ports:
      - "27018:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 10s
      retries: 100

  # Kafka
  zookeeper:
    image: quay.io/strimzi/kafka:latest-kafka-3.8.0
    container_name: zookeeper
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs

  kafka:
    image: quay.io/strimzi/kafka:latest-kafka-3.8.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties \
       --override listeners=$${KAFKA_LISTENERS} \
       --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} \
       --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server 0.0.0.0:9092 || exit 1
      interval: 5s
      retries: 100

  # MySQL
  mysql:
    image: docker.io/library/mysql:8.4
    container_name: mysql
    environment:
      MYSQL_DATABASE: inventory
      MYSQL_USER: user
      MYSQL_PASSWORD: pass
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  prometheus:
    image: docker.io/prom/prometheus:v2.54.1
    container_name: prometheus
    network_mode: host
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: docker.io/grafana/grafana:11.2.2
    container_name: grafana
    network_mode: host
    volumes:
      - ./configs/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:Z
      - ./configs/inventory-service-dashboard.json:/etc/grafana/provisioning/dashboards/inventory-service-dashboard.json:Z
      - ./configs/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml:Z
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  jaeger-all-in-one:
    image: docker.io/jaegertracing/all-in-one:1.62.0
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317"   # OTLP receiver

networks:
  keycloak_network:
    driver: bridge
