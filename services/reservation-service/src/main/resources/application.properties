quarkus.http.test-port=8181
quarkus.http.port=8081
quarkus.smallrye-graphql-client.inventory.url=http://localhost:8083/graphql
quarkus.oidc.application-type=service

# §11.1.1 config instead of hardcoded address
# "rental" is the variable part to refer to in the @RegisterRestClient(configKey = "rental")
quarkus.rest-client.rental.url=http://localhost:8082

## DB access
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=user
quarkus.datasource.password=pass

# defining the connection url explicitly only in prod mode will allow automatic configured dev service
# when we start using reactive non-blocking postgres db communication we disable the jdbc protocol URL
# %prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/reservation

# when we start using reactive non-blocking postgres db communication
%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/reservation

# drop and create the database at startup
quarkus.hibernate-orm.database.generation = drop-and-create

## §6.4.2 wiring the services to use the quasi production keycloak for running the service in production mode
%prod.quarkus.oidc.auth-server-url=http://localhost:7777/realms/car-rental
%prod.quarkus.oidc.client-id=reservation-service
%prod.quarkus.oidc.token-state-manager.split-tokens=true

# mapping invoices-rabbitmq to invoices queue
%test.mp.messaging.incoming.invoices-rabbitmq.queue.name=invoices
%test.mp.messaging.incoming.invoices-rabbitmq.exchange.name=invoices

# §11.1.1 necessary when you use rabbitmq as external service (outside dev mode)
# add %prod. to keep the rabbitmq dev service working in dev mode
%prod.rabbitmq-host=localhost
%prod.rabbitmq-port=5672
%prod.rabbitmq-http-port=15672
%prod.rabbitmq-username=guest
%prod.rabbitmq.password=guest
